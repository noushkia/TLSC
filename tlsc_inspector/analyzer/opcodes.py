from typing import Dict

Z_OPERATOR_TUPLE = (0, 1)
UNARY_OPERATOR_TUPLE = (1, 1)
BINARY_OPERATOR_TUPLE = (2, 1)
TERNARY_OPERATOR_TUPLE = (3, 1)
STACK = "stack"
ADDRESS = "address"

# stack tuple contains (no_of_elements_popped, no_of_elements_pushed)

# TODO: Make this more specific when TypedDict supports key re-usage.
OPCODES: Dict = {
    "STOP": {STACK: (0, 0), ADDRESS: 0x00}, "ADD": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x01},
    "MUL": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x02}, "SUB": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x03},
    "DIV": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x04}, "SDIV": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x05},
    "MOD": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x06}, "SMOD": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x07},
    "ADDMOD": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x08},
    "MULMOD": {STACK: TERNARY_OPERATOR_TUPLE, ADDRESS: 0x09}, "EXP": {
        STACK: BINARY_OPERATOR_TUPLE,
        ADDRESS: 0x0A,
    },
    "SIGNEXTEND": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x0B}, "LT": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x10},
    "GT": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x11}, "SLT": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x12},
    "SGT": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x13}, "EQ": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x14},
    "ISZERO": {STACK: UNARY_OPERATOR_TUPLE, ADDRESS: 0x15}, "AND": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x16},
    "OR": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x17}, "XOR": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x18},
    "NOT": {STACK: UNARY_OPERATOR_TUPLE, ADDRESS: 0x19}, "BYTE": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x1A},
    "SHL": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x1B}, "SHR": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x1C},
    "SAR": {STACK: BINARY_OPERATOR_TUPLE, ADDRESS: 0x1D}, "SHA3": {
        STACK: BINARY_OPERATOR_TUPLE,
        ADDRESS: 0x20,
    },
    "ADDRESS": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x30}, "BALANCE": {STACK: UNARY_OPERATOR_TUPLE, ADDRESS: 0x31},
    "ORIGIN": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x32}, "CALLER": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x33},
    "CALLVALUE": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x34},
    "CALLDATALOAD": {STACK: UNARY_OPERATOR_TUPLE, ADDRESS: 0x35},
    "CALLDATASIZE": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x36}, "CALLDATACOPY": {
        STACK: (3, 0),
        ADDRESS: 0x37,
    },
    "CODESIZE": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x38}, "CODECOPY": {
        STACK: (3, 0),
        ADDRESS: 0x39,
    },
    "GASPRICE": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x3A}, "EXTCODESIZE": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x3B},
    "EXTCODECOPY": {
        STACK: (4, 0),
        ADDRESS: 0x3C,
    },
    "RETURNDATASIZE": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x3D},
    "RETURNDATACOPY": {STACK: (3, 0), ADDRESS: 0x3E},
    "EXTCODEHASH": {STACK: UNARY_OPERATOR_TUPLE, ADDRESS: 0x3F},
    "BLOCKHASH": {STACK: UNARY_OPERATOR_TUPLE, ADDRESS: 0x40},
    "COINBASE": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x41},
    "TIMESTAMP": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x42},
    "NUMBER": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x43},
    "DIFFICULTY": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x44},
    "GASLIMIT": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x45},
    "CHAINID": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x46},
    "SELFBALANCE": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x47},
    "BASEFEE": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x48}, "POP": {STACK: (1, 0), ADDRESS: 0x50},
    "MLOAD": {STACK: UNARY_OPERATOR_TUPLE, ADDRESS: 0x51}, "MSTORE": {STACK: (2, 0), ADDRESS: 0x52},
    "MSTORE8": {STACK: (2, 0), ADDRESS: 0x53}, "SLOAD": {STACK: UNARY_OPERATOR_TUPLE, ADDRESS: 0x54},
    "SSTORE": {STACK: (1, 0), ADDRESS: 0x55}, "JUMP": {STACK: (1, 0), ADDRESS: 0x56},
    "JUMPI": {STACK: (2, 0), ADDRESS: 0x57}, "PC": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x58},
    "MSIZE": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x59}, "GAS": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x5A},
    "JUMPDEST": {STACK: (0, 0), ADDRESS: 0x5B}, "BEGINSUB": {STACK: (0, 0), ADDRESS: 0x5C},
    "RETURNSUB": {STACK: (0, 0), ADDRESS: 0x5D}, "JUMPSUB": {STACK: (1, 0), ADDRESS: 0x5E},
    "LOG0": {STACK: (2, 0), ADDRESS: 0xA0}, "LOG1": {STACK: (3, 0), ADDRESS: 0xA1},
    "LOG2": {STACK: (4, 0), ADDRESS: 0xA2}, "LOG3": {STACK: (5, 0), ADDRESS: 0xA3},
    "LOG4": {STACK: (6, 0), ADDRESS: 0xA4}, "CREATE": {STACK: TERNARY_OPERATOR_TUPLE, ADDRESS: 0xF0},
    "CREATE2": {
        STACK: (4, 1),
        ADDRESS: 0xF5,
    },
    "CALL": {STACK: (7, 1), ADDRESS: 0xF1}, "CALLCODE": {STACK: (7, 1), ADDRESS: 0xF2},
    "RETURN": {STACK: (2, 0), ADDRESS: 0xF3}, "DELEGATECALL": {STACK: (6, 1), ADDRESS: 0xF4},
    "STATICCALL": {STACK: (6, 1), ADDRESS: 0xFA}, "REVERT": {STACK: (2, 0), ADDRESS: 0xFD},
    "SELFDESTRUCT": {STACK: (1, 0), ADDRESS: 0xFF}, "INVALID": {STACK: (0, 0), ADDRESS: 0xFE},
    "PUSH0": {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x5F}
}

for i in range(1, 33):
    OPCODES[f"PUSH{i}"] = {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x5F + i}

for i in range(1, 17):
    OPCODES[f"DUP{i}"] = {STACK: (0, 0), ADDRESS: 0x7F + i}
    OPCODES[f"SWAP{i}"] = {STACK: Z_OPERATOR_TUPLE, ADDRESS: 0x8F + i}

ADDRESS_OPCODE_MAPPING = {}

for opcode, opcode_data in OPCODES.items():
    ADDRESS_OPCODE_MAPPING[opcode_data[ADDRESS]] = opcode
